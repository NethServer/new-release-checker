#!/bin/bash

#
# Copyright (C) 2020 Nethesis S.r.l.
# http://www.nethesis.it - nethserver@nethesis.it
#
# This script is part of NethServer.
#
# NethServer is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License,
# or any later version.
#
# NethServer is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with NethServer.  If not, see COPYING.
#

if [ -z "$GITHUBTOKEN" ]; then
    echo "GITHUBTOKEN not set"
    exit 2
fi

for app_config in "."/*.cfg; do
    # Read app configuration
    . "$app_config"

    echo -e "\\nChecking $app_name version..."

    # Retrieve upstream version
    tags=$(curl -sH "Authorization: token $GITHUBTOKEN" "https://api.github.com/repos/$upstream_owner/$upstream_repo/tags")

    error_msg=$(echo "$tags" | jq -r '.message?')
    if [ -n "$error_msg" ] && [ "$error_msg" != "null" ]; then
        echo "Error retrieving upstream tags: $error_msg"
        exit 1
    fi

    upstream_version=$(echo "$tags" | jq -r '.[0].name' | sed -E 's/v//g')

    if [ -z "$upstream_version" ]; then
        echo "Unable to retrieve upstream version"
        exit 1
    elif [[ $upstream_version == *"RC"* ]] || [[ $upstream_version == *"rc"* ]] || [[ $upstream_version == *"beta"* ]]; then
        echo "Latest upstream version is RC or beta: $upstream_version. Skipping"
        continue
    fi

    # Retrieve Nethserver version
    nethserver_version=$(curl -sH "Authorization: token $GITHUBTOKEN" https://raw.githubusercontent.com/$ns_owner/$ns_repo/master/$ns_repo.spec |
        grep "%define $spec_var" | awk '{print $3}')

    echo -e "Upstream version: $upstream_version\\nNethServer version: $nethserver_version"

    if [ "$upstream_version" != "$nethserver_version" ]; then
        # Check if issue has already been opened
        issue_number=$(curl -sH "Authorization: token $GITHUBTOKEN" "https://api.github.com/search/issues?q=\"$app_name+$upstream_version\"+in:title+repo:NethServer/dev+author:nethbot&sort=created" | jq -r '.items[0].number')

        if [ -n "$issue_number" ] && [ "$issue_number" != "null" ]; then
            echo "Issue already exists: #$issue_number"
            continue
        fi

        # Create issue
        url_issue=$(curl -sH "Authorization: token $GITHUBTOKEN" -d \
            "{\"title\":\"$app_name $upstream_version\", \"body\":\"Update $app_name release to $upstream_version\n\nChangelog:\n$changelog_url\"}" \
            "https://api.github.com/repos/NethServer/dev/issues" | jq -r '.html_url')

        echo "Issue created: $url_issue"

        # Retrieve master branch sha
        master_sha=$(curl -sH "Authorization: token $GITHUBTOKEN" "https://api.github.com/repos/$ns_owner/$ns_repo/git/ref/heads/master" | jq -r '.object.sha')

        # Create remote branch
        error_msg=$(curl -sH "Authorization: token $GITHUBTOKEN" -X POST \
            -d "{\"ref\":\"refs/heads/update-version-$upstream_version\", \"sha\":\"$master_sha\"}" \
            "https://api.github.com/repos/$ns_owner/$ns_repo/git/refs" | jq -r '.message')

        if [ -n "$error_msg" ] && [ "$error_msg" != "null" ]; then
            echo "Error creating branch: $error_msg"
            exit 1
        fi

        # Clone remote branch without checking out files
        git clone -b update-version-$upstream_version -n "https://nethbot:$GITHUBTOKEN@github.com/$ns_owner/$ns_repo.git" --depth 1
        pushd $ns_repo

        # Unstage deletion of all files
        git reset HEAD

        # Edit spec file and push changes
        git checkout $ns_repo.spec
        upstream_version_escaped=$(echo $upstream_version | sed -E 's/\./\\./g')
        sed -Ei "s/%define $spec_var .+$/%define $spec_var $upstream_version_escaped/" $ns_repo.spec
        git add $ns_repo.spec
        git commit -m "Update to $upstream_version" --author="NethBot <sviluppo@nethesis.it>"
        git push -u origin update-version-$upstream_version

        # Create pull request
        pull_request=$(curl -sH "Authorization: token $GITHUBTOKEN" -d "{\"title\":\"Update to $upstream_version\", \"body\":\"$url_issue\", \
                \"head\": \"update-version-$upstream_version\", \"base\": \"master\"}" \
            "https://api.github.com/repos/$ns_owner/$ns_repo/pulls")

        error_msg=$(echo "$pull_request" | jq -r '.message?')
        if [ -n "$error_msg" ] && [ "$error_msg" != "null" ]; then
            echo "Error creating pull request: $error_msg"
            exit 1
        fi

        echo "Pull request created: $(echo "$pull_request" | jq -r '.html_url')"

        popd
        rm -rf $ns_repo/
    else
        echo "$app_name NethServer version is updated"
    fi
done
